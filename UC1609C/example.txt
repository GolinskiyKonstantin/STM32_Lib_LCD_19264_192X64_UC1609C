/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com


/*
	подключение LCD UC1609C:

	в CubeMX включаем SPI только на отправку скорость максимум
	( пины желательно называем как в коде если нет то в коде ставим нужнве )

	CS   ->   CS ( chip select )
	RST  ->   RST ( Reset )
	CD   ->   DC ( date / command )
	SCK	 ->   SCL
	SDA	 ->   MOSI
	VDD  ->   +3.3V
	VSS	 ->   GND
	A	 ->   anode led ( +3.3V or PWM )
	K	 ->   katode led ( GND )

*/

в файле #include "UC1609C.h" указываем наши параметры установки пины, какой SPI используем, и разрешение дисплея если нужно.

//#######  SETUP  ##############################################################################################


			// указываем порт SPI для HAL -------------------
			#define 	UC1609C_SPI_HAL 		hspi1
			//-----------------------------------------------
			
			//============================================================================
		
			//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
			#if defined (DC_GPIO_Port)
			#else
				#define DC_GPIO_Port	GPIOC
				#define DC_Pin			GPIO_PIN_5
			#endif
			
			#if defined (RST_GPIO_Port)
			#else
				#define RST_GPIO_Port   GPIOB
				#define RST_Pin			GPIO_PIN_14
			#endif
			
			//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
			// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
			
			#define CS_PORT
			
			//----------------------------------------------------------------------------------------
			#ifdef CS_PORT
				#if defined (CS_GPIO_Port)
				#else
					#define CS_GPIO_Port    GPIOB
					#define CS_Pin			GPIO_PIN_12
				#endif
			#endif
			
			//=============================================================================
			
			// def: 192 x 64
			#define  UC1609C_width			192			// 192
			#define	 UC1609C_height			64			// 64
			
//##############################################################################################################




	#include "UC1609C.h"

	#include "bitmap.h"
	
	.........
	.........

main()=============================================================================================================================

	.........
	.........
	.........


/////////////////////////////////////////////////////////////////////////////////////////////

	UC1609C_init();				// инициализация дисплея
	
	//-------------
	UC1609C_fillScreen(0x00);	// заполняем весь дисплей пустотой ( очищаем дисплей ) ( не трогая буфер кадра )
	
	UC1609C_clearDisplay();		// очищаем дисплей ( не трогая буфер кадра ) аналогично UC1609C_fillScreen(0x00);
	//-------------
	
	UC1609C_clearBuffer();		// очищаем буфер кадра но не очищаем сам дисплей
	
	UC1609C_update();			// выводим содержимое буфера кадра на дисплей ( прорисовываем буфер кадра )
	
	HAL_Delay (1000);
	
	//--------------
	UC1609C_allPixelsOn( 1 );	// включаем все пиксели на дисплее ( закрашиваем его )( не трогая буфер кадра )
	
	HAL_Delay ( 1000 );
	
	UC1609C_allPixelsOn( 0 );	// выключаем все пиксели на дисплее ( очищаем его )( не трогая буфер кадра )
	
	HAL_Delay ( 1000 );
	//---------------
	
	UC1609C_fillScreen(0x55);	// заполняем весь дисплей битами ( только дисплей буффер не трогаем )
								// ( например если 0x00 то все пустое, 0xFF то все закрашено, 0x55 ( 0в01010101 ) то все через строчку )
	
	HAL_Delay ( 1000 );
	
	UC1609C_clearBuffer();		// очищаем буфер кадра , но не очищаем сам дисплей
		
	//-----------------
	// рисуем пиксель ( указывая координаты и вид пикселя )(заполняем в буфер но не выводим на екран )
	// вид пикселя подбором так как для разных экранов разные и вызываются )
	UC1609C_drawPixel( 5, 5, FOREGROUND);	// FOREGROUND or BACKGROUND  or INVERSE	
	UC1609C_drawPixel( 6, 6, BACKGROUND);	// FOREGROUND or BACKGROUND  or INVERSE		
	UC1609C_drawPixel( 7, 7, INVERSE);		// FOREGROUND or BACKGROUND  or INVERSE	
	
	UC1609C_update();			// выводим на экран буфер кадра в который выше заполнили прорисовку пикселя		
	//-----------------
	
	HAL_Delay ( 1000 );
	
	UC1609C_clearBuffer();		// очищаем буфер кадра но не очищаем сам дисплей
	
	//-----------------
	// рисуем картинку ( заполняем в буфер кадра но не выводим на дисплей )
	// указав координаты, ширину и высату, также вид пикселя FOREGROUND or BACKGROUND  or INVERSE
	UC1609C_bitmap( 30, 20, 128, 27, logo, FOREGROUND);		// FOREGROUND or BACKGROUND  or INVERSE	
	
	UC1609C_update();			// выводим на экран буфер кадра в который выше заполнили прорисовку картинки		
	//-----------------
	
	HAL_Delay ( 1000 );
	
	// делаем скроллинг ране выведенных данных на дисплей-------------
	// скроллинг вверх
	for( int i = 0; i < 64; i++){
		UC1609C_scroll(i);
		HAL_Delay ( 100 );
	}
	// скроллинг вниз
	for( int i = 64; i >= 0; i--){
		UC1609C_scroll(i);
		HAL_Delay ( 100 );
	}
	//----------------------------------------------------------------
	
	// установка контрасности дисплея
	UC1609C_contrast (100); // 0....255 ( def 30 )

	HAL_Delay ( 1000 );
	
	UC1609C_contrast (30); // 0....255 ( def 30 )

	HAL_Delay ( 1000 );

	//--------------
	UC1609C_invertDisplay( 1 );	// включаем инверсию ранее выведенных данных на дисплей
	
	HAL_Delay ( 1000 );
	
	UC1609C_invertDisplay( 0 );	// выключаем инверсию ранее выведенных данных на дисплей
	
	HAL_Delay ( 1000 );
	//---------------
	
	// ротация дисплея (работает в зависимости от самого дисплея - размеров )-----------
	// UC1609C_ROTATION_FLIP_TWO
	// UC1609C_ROTATION_NORMAL 
	// UC1609C_ROTATION_FLIP_ONE
	// UC1609C_ROTATION_FLIP_THREE 
	
	UC1609C_rotate( UC1609C_ROTATION_FLIP_TWO );
	HAL_Delay ( 1000 );
	
	UC1609C_rotate( UC1609C_ROTATION_FLIP_ONE );
	HAL_Delay ( 1000 );
	
	UC1609C_rotate( UC1609C_ROTATION_FLIP_THREE );
	HAL_Delay ( 1000 );
	
	UC1609C_rotate( UC1609C_ROTATION_NORMAL  );
	HAL_Delay ( 1000 );
	//------------------------------------------------------------------------------------
	
	//---------
	UC1609C_enable( 0 );	// выключаем дисплей ( данные не отображаются но хранятся в памяти дисплея )
	
	HAL_Delay ( 1000 );
	
	UC1609C_enable( 1 );	// включаем дисплей ( отображаем данные которые выше выключели )
	
	HAL_Delay ( 1000 );
	//----------
	
	UC1609C_clearDisplay();	// очищаем дисплей ( не трогая буфер кадра ) аналогично UC1609C_fillScreen(0x00);

	UC1609C_clearBuffer();	// очищаем буфер кадра но не очищаем сам дисплей

	// вывод на экран строки ( латиница и кириллица ) ( не забываем вызывать UC1609C_update(); )----------------
	// 1- координата x
	// 2- координата y
	// 3- сама строка
	// 4- указываем шрифт символа
	// 5- множитель размера символа
	// 6- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	UC1609C_Print(4, 30, "Привет, как дела? Hello 1983 =)", &Font_6x8, 1, FOREGROUND);	// FOREGROUND or BACKGROUND  or INVERSE	
	UC1609C_update();		// выводим на экран буфер кадра в который выше заполнили
	
	HAL_Delay ( 1000 );
	//----------------------------------------------------------------------------------------------------------
	
	
	UC1609C_clearBuffer();	// очищаем буфер кадра но не очищаем сам дисплей
	
	// выводим на дисплей счетчик от 0 до 254 ------------------------------
	for( int16_t i = 0; i < 1001; i++){
		
		char buff [5];
		sprintf( buff, "%04d", i );
		
		UC1609C_Print(65, 25, buff, &Font_16x26, 1, FOREGROUND);	// FOREGROUND or BACKGROUND  or INVERSE	
		UC1609C_update();
		
		//HAL_Delay ( 1000 );
	}
	//----------------------------------------------------------------------
	
	// выводим различные фигуры ---------------------------------------------------------------------------------------------
	//UC1609C_DrawLine( 5, 5, 50, 50, FOREGROUND);							// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawRectangle( 25, 15, 30, 30, FOREGROUND);					// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawFilledRectangle( 85, 25, 20, 20, FOREGROUND);				// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawTriangle( 20, 30, 40, 50, 50, 50, FOREGROUND);			// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawFilledTriangle( 115, 35, 145, 30, 165, 60, FOREGROUND);	// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawCircle( 10, 10, 40, FOREGROUND);							// FOREGROUND or BACKGROUND  or INVERSE	
	//UC1609C_DrawFilledCircle( 140, 30, 10, FOREGROUND);					// FOREGROUND or BACKGROUND  or INVERSE	

	//UC1609C_update();	
	
	//HAL_Delay ( 1000 );
	//------------------------------------------------------------------------------------------------------------------------
	
	HAL_Delay ( 1000 );
	
	// рисуем прямоугольник с закругленными краями ( закрашенный )
	//UC1609C_DrawFillRoundRect(10, 10, 50, 50, 10, FOREGROUND);
	
	// рисуем прямоугольник с закругленными краями ( пустотелый )
	//UC1609C_DrawRoundRect(10, 10, 50, 50, 10, FOREGROUND);
	
	// рисуем полукруг ( правое или левое полушарие (параметр 1 или 2) ) закрашенный
	//UC1609C_DrawFillCircleHelper(30, 30, 20 , 1, 0, FOREGROUND);
	
	// рисуем дугу ( четверть круга (параметр 1, 2, 4, 8) ) шириной 1 пиксель
	//UC1609C_DrawCircleHelper(30, 30, 20 , 1, FOREGROUND);
	
//////////////////////////////////////////////////////////////////////////////////////////////



while(1)===========================================================================================================================

	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
