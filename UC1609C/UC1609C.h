/*
	
  ******************************************************************************
  * @file 			( фаил ):   UC1609C.h
  * @brief 		( описание ):  	
  ******************************************************************************
  * @attention 	( внимание ):	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
  ******************************************************************************
  
*/

#ifndef _UC1609C_H
#define _UC1609C_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

#include "main.h"

#include "fonts.h"

#include "stdlib.h"
#include "string.h"

#include "stdio.h"


/*
	подключение LCD UC1609C:

	в CubeMX включаем SPI только на отправку скорость максимум
	( пины желательно называем как в коде если нет то в коде ставим нужнве )

	CS   ->   CS ( chip select )
	RST  ->   RST ( Reset )
	CD   ->   DC ( date / command )
	SCK	 ->   SCL
	SDA	 ->   MOSI
	VDD  ->   +3.3V
	VSS	 ->   GND
	A	 ->   anode led ( +3.3V or PWM )
	K	 ->   katode led ( GND )

*/


//#######  SETUP  ##############################################################################################


			// указываем порт SPI для HAL -------------------
			#define 	UC1609C_SPI_HAL 		hspi1
			//-----------------------------------------------
			
			//============================================================================
		
			//=== указываем порты ( если в кубе назвали их DC RES CS то тогда нечего указывать не нужно )
			#if defined (DC_GPIO_Port)
			#else
				#define DC_GPIO_Port	GPIOC
				#define DC_Pin			GPIO_PIN_5
			#endif
			
			#if defined (RST_GPIO_Port)
			#else
				#define RST_GPIO_Port   GPIOB
				#define RST_Pin			GPIO_PIN_14
			#endif
			
			//--  Cесли используем порт CS для выбора устройства тогда раскомментировать ------------
			// если у нас одно устройство лучше пин CS притянуть к земле( или на порту подать GND )
			
			#define CS_PORT
			
			//----------------------------------------------------------------------------------------
			#ifdef CS_PORT
				#if defined (CS_GPIO_Port)
				#else
					#define CS_GPIO_Port    GPIOB
					#define CS_Pin			GPIO_PIN_12
				#endif
			#endif
			
			//=============================================================================
			
			// def: 192 x 64
			#define  UC1609C_width			192		// 192
			#define	 UC1609C_height			64		// 64
			
//##############################################################################################################

// Display  Size ------------------------------------------------

#define UC1609C_WIDTH	UC1609C_width
#define UC1609C_HEIGHT	UC1609C_height

#ifdef UC1609C_SPI_HAL
	extern SPI_HandleTypeDef UC1609C_SPI_HAL;
#endif

/* Absolute value */
#define ABS(x)   ((x) > 0 ? (x) : -(x))


// UC1609C Read registers ---------------------------------------------
#define UC1609C_GET_STATUS 					0x01 	// Not used v1.0

// UC1609C Write registers --------------------------------------------
#define UC1609C_SYSTEM_RESET 				0xE2 	// Not used v1.0

#define UC1609C_POWER_CONTROL 				0x2F 
#define UC1609C_PC_SET 						0x06 	// PC[2:0] 110 Internal V LCD (7x charge pump) + 10b: 1.4mA

#define UC1609C_ADDRESS_CONTROL 			0x88 	// set RAM address control
#define UC1609_ADDRESS_SET 					0x02 	// FOR UC1609  Set AC [2:0] Program registers  for RAM address control.
#define UC1609C_ADDRESS_SET 				0x01 	// FOR UC1609C  Set AC [2:0] Program registers  for RAM address control.

#define UC1609C_SET_PAGEADD 				0xB0 	// Page address Set PA[3:0]
#define UC1609C_SET_COLADD_LSB 				0x00 	// Column Address Set CA [3:0]
#define UC1609C_SET_COLADD_MSB 				0x10 	// Column Address Set CA [7:4]

#define UC1609C_TEMP_COMP_REG 				0x27 	// Temperature Compensation Register
#define UC1609C_TEMP_COMP_SET 				0x00 	// TC[1:0] = 00b= -0.00%/ C

#define UC1609C_FRAMERATE_REG 				0xA0 	// Frame rate
#define UC1609C_FRAMERATE_SET 				0x01  	// Set Frame Rate LC [4:3] 01b: 95 fps

#define UC1609C_BIAS_RATIO 					0xE8 	// Bias Ratio. The ratio between V-LCD and V-D .
#define UC1609C_BIAS_RATIO_SET 				0x03 	//  Set BR[1:0] = 11 (set to 9 default)

#define UC1609C_GN_PM 						0x81 	// Set V BIAS Potentiometer to fine tune V-D and V-LCD  (double-byte command)
#define UC1609C_DEFAULT_GN_PM 				0x49 	// default only used if user does not specify Vbias

#define UC1609C_LCD_CONTROL 				0xC0 	// Rotate map control
#define UC1609C_DISPLAY_ON 					0xAE 	// enables display
#define UC1609C_ALL_PIXEL_ON 				0xA4 	// sets on all Pixels on
#define UC1609C_INVERSE_DISPLAY 			0xA6 	// inverts display
#define UC1609C_SCROLL 						0x40 	// scrolls , Set the scroll line number. 0-64

// Rotate -------------------------------------------------------------
#define UC1609C_ROTATION_FLIP_TWO 			0x06
#define UC1609C_ROTATION_NORMAL 			0x04
#define UC1609C_ROTATION_FLIP_ONE 			0x02
#define UC1609C_ROTATION_FLIP_THREE 		0x00

//---------------------------------------------------------------------


// Отображение определения цветов пикселей
// (1): белый на синем, FG = белый BG = синий
// ERM19264SBS-4 ЖК-дисплей белый на синем
// (2): черный на белом, FG = черный BG = белый
// ERM19264FS-4 ЖК-дисплей, черный на белом
// (3): белое на черном, FG = белое, BG = черное
// ERM19264DNS-4 ЖК-дисплей Белый на черном
#define FOREGROUND  						0
#define BACKGROUND 							1
#define INVERSE								2

//---------------------------------------------------------------------


/* Functions prototypes ----------------------------------------------*/


/*
	******************************************************************************
	* @brief	 ( описание ):  инициализация дисплея
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_init( void );
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  установка контрасности дисплея
	* @param	( параметры ):	значение от 0....255 ( по умолчанию 30 )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_contrast (uint8_t bits);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  включение и отключение информации на дисплее ( с сохранением информации )
	* @param	( параметры ):	1 - ON    0 - OFF
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_enable (uint8_t bits);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  скроллинг дисплея вертикально
	* @param	( параметры ):	значение от 0 до 64
									на сколько строк сдвигаем 
										от 0 до 64 двигаем вверх
										от 64 до 0 двигаем вниз
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_scroll (uint8_t bits);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  ротация дисплея
	* @param	( параметры ):	Param1: 4 possible values 000 010 100 110 (defined)
								указываем параметр ротации:
									UC1609C_ROTATION_FLIP_TWO
									UC1609C_ROTATION_NORMAL
									UC1609C_ROTATION_FLIP_ONE
									UC1609C_ROTATION_FLIP_THREE
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_rotate(uint8_t rotatevalue);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  инверсия дисплея
	* @param	( параметры ):	Param1: bits, 1 invert , 0 normal
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_invertDisplay (uint8_t bits);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  вывод на дисплей всех точек сразу ( закрашиваем полностью дисплей )
	* @param	( параметры ): 	параметр:	1- все точки включены, 0 - все точки выключены
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_allPixelsOn(uint8_t bits);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  заполняем весь дисплей битами ( только дисплей буффер не трогаем )
								( например если 0x00 то все пустое, 0xFF то все закрашено, 0x55 ( 0в01010101 ) то все через строчку )
	* @param	( параметры ):	1- команда, 2 - данные
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_fillScreen(uint8_t dataPattern);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  вывод информации из буфера на дисплей
								( вызывается каждый раз как нужно вывести данные на дисплей )
								( например вывели текс и после вызываем функцию UC1609C_update( void ) )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_update( void );
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисует пиксель по указанным координатам ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	Param1: x offset 0-192
								Param2: y offset 0-64
								Param3: вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/

void UC1609C_drawPixel( int16_t x, int16_t y, uint8_t colour );
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  отчиска буфера кадра ( но не очищает сам дисплей )
	* @param	( параметры ):
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_clearBuffer( void );
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  вывод картинки ( из массива ) на экран ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	параметры:
									//Param1: x offset 0-192
									//Param2: y offset 0-64
									//Param3: width 0-192
									//Param4 height 0-64
									//Param5 массив с картинкой
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_bitmap(int16_t x, int16_t y, uint8_t w, uint8_t h, const uint8_t* data, uint8_t colour);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  отчиска самого дисплея ( буфер кадра не очищается )
	* @param	( параметры ):	
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_clearDisplay( void );			
//----------------------------------------------------------------------------------



/*
	******************************************************************************
	* @brief	 ( описание ):  вывод на экран строки ( латиница и кириллица ) ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x
								2- координата y
								3- сама строка
								4- указываем шрифт символа
								5- множитель размера символа
								6- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, uint8_t color);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем линию ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- координата x2
								4- координата y2
								5- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint8_t c);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем прямоугольник пустотелый ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- ширина
								4- высота
								5- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем прямоугольник закрашеный ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- ширина
								4- высота
								5- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawFilledRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем триугольник пустотелый ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- координата x2
								4- координата y2
								5- координата x3
								6- координата y3
								7- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3, uint8_t color);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем триугольник заполненый ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- координата x2
								4- координата y2
								5- координата x3
								6- координата y3
								7- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawFilledTriangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3, uint8_t color);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем круг пустотелый ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- радиус
								4- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint8_t c);
//----------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  рисуем круг заполненый ( не забываем вызывать UC1609C_update(); )
	* @param	( параметры ):	1- координата x1
								2- координата y1
								3- радиус
								4- вид пикселя ( FOREGROUND or BACKGROUND  or INVERSE )
	* @return  ( возвращает ):	
	******************************************************************************
*/
void UC1609C_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint8_t c);
//----------------------------------------------------------------------------------

//==============================================================================
// Процедура рисования четверти окружности (закругление, дуга) ( ширина 1 пиксель)
//==============================================================================
void UC1609C_DrawCircleHelper(int16_t x0, int16_t y0, int16_t radius, int8_t quadrantMask, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void UC1609C_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void UC1609C_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( пустотелый )
//==============================================================================
void UC1609C_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint8_t color);
//==============================================================================
	
#ifdef __cplusplus
}
#endif

#endif	/*	_UC1609C_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
